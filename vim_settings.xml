<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/git/IRIS/iris-domain-repository/src/main/java/nl/reclassering/iris/domain/programma/gi/training/TrainingCriteria.java" timestamp="1510040994728">
        <mark key="[" line="102" column="27" />
        <mark key="]" line="102" column="26" />
        <mark key="^" line="102" column="26" />
        <mark key="." line="102" column="26" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/onderliggende/labelLayoutCustomFragments2.xhtml" timestamp="1515056900929">
        <mark key="[" line="17" column="0" />
        <mark key="]" line="17" column="177" />
        <mark key="." line="40" column="46" />
        <mark key="^" line="40" column="46" />
      </file>
      <file name="$USER_HOME$/git/jsf-playground/web/WEB-INF/web.xml" timestamp="1516988777324">
        <mark key="[" line="16" column="21" />
        <mark key="]" line="16" column="24" />
        <mark key="^" line="16" column="24" />
        <mark key="." line="16" column="24" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" timestamp="1519120822625">
        <mark key="'" line="1753" column="25" />
        <mark key="[" line="1812" column="38" />
        <mark key="]" line="1812" column="66" />
        <mark key="." line="1812" column="66" />
        <mark key="^" line="1812" column="66" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.072.sql" timestamp="1515756729300">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="63" column="31" />
        <mark key="^" line="27" column="31" />
        <mark key="." line="27" column="31" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-common/src/main/java/nl/reclassering/iris/common/overstijgend/enumeraties/GebruikersVoorkeur.java" timestamp="1508923062425">
        <mark key="[" line="8" column="17" />
        <mark key="]" line="9" column="20" />
        <mark key="." line="9" column="20" />
        <mark key="^" line="9" column="20" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/component/training/trainingTabTraining.xhtml" timestamp="1511186010250">
        <mark key="'" line="15" column="25" />
        <mark key="[" line="17" column="94" />
        <mark key="]" line="17" column="98" />
        <mark key="^" line="17" column="98" />
        <mark key="." line="17" column="98" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/pages.xml" timestamp="1516035227428">
        <mark key="[" line="129" column="8" />
        <mark key="]" line="129" column="95" />
        <mark key="^" line="129" column="7" />
        <mark key="." line="129" column="8" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/adviezen/advies_tbsmetvoorwaarden.xhtml" timestamp="1519206648860">
        <mark key="[" line="20" column="55" />
        <mark key="]" line="20" column="84" />
        <mark key="." line="20" column="157" />
        <mark key="^" line="20" column="157" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_6.3007.sql" timestamp="1516106394404">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="65" column="0" />
        <mark key="." line="26" column="0" />
        <mark key="^" line="26" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/information/messages.xhtml" timestamp="1516734718213">
        <mark key="[" line="30" column="32" />
        <mark key="]" line="30" column="31" />
        <mark key="^" line="30" column="31" />
        <mark key="." line="30" column="31" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.097.sql" timestamp="1519207576985">
        <mark key="'" line="0" column="49" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="210" column="0" />
        <mark key="^" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/action/GebruikersVoorkeurenAction.java" timestamp="1509632927920">
        <mark key="'" line="191" column="28" />
        <mark key="[" line="812" column="0" />
        <mark key="]" line="825" column="3" />
        <mark key="^" line="815" column="25" />
        <mark key="." line="815" column="25" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/uitgebreidadviesList.xhtml" timestamp="1519200997370">
        <mark key="'" line="190" column="28" />
        <mark key="[" line="39" column="96" />
        <mark key="]" line="39" column="124" />
        <mark key="." line="156" column="73" />
        <mark key="^" line="39" column="124" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/oxrec.xhtml" timestamp="1516184216694">
        <mark key="[" line="66" column="34" />
        <mark key="]" line="66" column="37" />
        <mark key="." line="66" column="37" />
        <mark key="^" line="66" column="37" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/summary_popup.xhtml" timestamp="1511956772199">
        <mark key="[" line="8" column="97" />
        <mark key="]" line="8" column="96" />
        <mark key="." line="8" column="96" />
        <mark key="^" line="8" column="96" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/filter/VdlLogger.java" timestamp="1516029534669">
        <mark key="[" line="28" column="0" />
        <mark key="]" line="70" column="1" />
        <mark key="." line="28" column="0" />
        <mark key="^" line="28" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" timestamp="1518102015485">
        <mark key="'" line="474" column="0" />
        <mark key="[" line="1152" column="0" />
        <mark key="]" line="1152" column="0" />
        <mark key="^" line="1230" column="3" />
        <mark key="." line="1152" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/java/nl/reclassering/iris/model/stam/Regio.java" timestamp="1509631826835">
        <mark key="'" line="75" column="6" />
        <mark key="[" line="90" column="0" />
        <mark key="]" line="90" column="6" />
        <mark key="^" line="84" column="41" />
        <mark key="." line="90" column="6" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.079.sql" timestamp="1516875307834">
        <mark key="'" line="0" column="118" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="66" column="0" />
        <mark key="." line="66" column="0" />
        <mark key="^" line="66" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/WEB-INF/si.taglib.xml" timestamp="1517003526683">
        <mark key="[" line="15" column="18" />
        <mark key="]" line="15" column="27" />
        <mark key="^" line="15" column="27" />
        <mark key="." line="15" column="27" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/messages/pages/component/projectenbank/projectenbank.properties" timestamp="1507822165742">
        <mark key="'" line="30" column="28" />
        <mark key="[" line="36" column="34" />
        <mark key="]" line="36" column="32" />
        <mark key="^" line="36" column="32" />
        <mark key="." line="36" column="32" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/snelinstrument/si-infoTekst.xhtml" timestamp="1515961736263">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="6" column="0" />
        <mark key="^" line="6" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_delictverleden.xhtml" timestamp="1518091248554">
        <mark key="[" line="8" column="0" />
        <mark key="]" line="9" column="38" />
        <mark key="." line="38" column="58" />
        <mark key="^" line="38" column="58" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/si/veld.xhtml" timestamp="1517002899079">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="4" column="33" />
        <mark key="." line="4" column="29" />
        <mark key="^" line="4" column="29" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/test/java/nl/reclassering/iris/web/action/component/projectenbank/ProjectenbankListActionTest.java" timestamp="1510048613443">
        <mark key="[" line="57" column="0" />
        <mark key="]" line="57" column="7" />
        <mark key="^" line="57" column="7" />
        <mark key="." line="57" column="7" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/login.xhtml" timestamp="1517001337739">
        <mark key="'" line="14" column="14" />
        <mark key="[" line="25" column="18" />
        <mark key="]" line="25" column="18" />
        <mark key="." line="25" column="18" />
        <mark key="^" line="25" column="16" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/filter/VdlLoggerFactory.java" timestamp="1516029708947">
        <mark key="[" line="12" column="0" />
        <mark key="]" line="12" column="40" />
        <mark key="." line="23" column="0" />
        <mark key="^" line="23" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/WEB-INF/iris.taglib.xml" timestamp="1519119246629">
        <mark key="[" line="8072" column="18" />
        <mark key="]" line="8072" column="22" />
        <mark key="^" line="8072" column="22" />
        <mark key="." line="8072" column="22" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/sneladvies/blokNoLayout.xhtml" timestamp="1516008905339">
        <mark key="[" line="55" column="0" />
        <mark key="]" line="55" column="19" />
        <mark key="." line="55" column="19" />
        <mark key="^" line="55" column="19" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/analyse_primaire_delict.xhtml" timestamp="1519201641290">
        <mark key="'" line="55" column="0" />
        <mark key="[" line="13" column="0" />
        <mark key="]" line="13" column="39" />
        <mark key="." line="13" column="0" />
        <mark key="^" line="75" column="22" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" timestamp="1519129069229">
        <mark key="'" line="119" column="56" />
        <mark key="[" line="83" column="120" />
        <mark key="]" line="83" column="120" />
        <mark key="^" line="83" column="120" />
        <mark key="." line="83" column="120" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/verdieping_scil.xhtml" timestamp="1511523379160">
        <mark key="[" line="15" column="46" />
        <mark key="]" line="15" column="62" />
        <mark key="." line="15" column="62" />
        <mark key="^" line="15" column="62" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/messages/pages/diagnose/uitgebreidadvies.properties" timestamp="1519120703411">
        <mark key="[" line="62" column="59" />
        <mark key="]" line="63" column="52" />
        <mark key="^" line="63" column="52" />
        <mark key="." line="63" column="52" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.076.sql" timestamp="1516711859700">
        <mark key="[" line="32" column="35" />
        <mark key="]" line="32" column="33" />
        <mark key="." line="32" column="33" />
        <mark key="^" line="32" column="33" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_dagbesteding.xhtml" timestamp="1519120555250">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="94" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/container/modalPanel.xhtml" timestamp="1516893171589">
        <mark key="[" line="59" column="84" />
        <mark key="]" line="59" column="122" />
        <mark key="." line="60" column="110" />
        <mark key="^" line="60" column="110" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/action/components/word/TableProcessor.java" timestamp="1513778391707">
        <mark key="[" line="137" column="0" />
        <mark key="]" line="150" column="3" />
        <mark key="." line="34" column="9" />
        <mark key="^" line="34" column="9" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/si/label.xhtml" timestamp="1517003316370">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="7" column="16" />
        <mark key="." line="5" column="0" />
        <mark key="^" line="5" column="3" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/action/component/training/TrainingListAction.java" timestamp="1509633061419">
        <mark key="[" line="83" column="0" />
        <mark key="]" line="83" column="3" />
        <mark key="^" line="83" column="2" />
        <mark key="." line="83" column="3" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/component/activiteit/uitgebreidadvies/uitgebreidadvies.pages.xml" timestamp="1516033578031">
        <mark key="[" line="41" column="0" />
        <mark key="]" line="47" column="20" />
        <mark key="^" line="87" column="93" />
        <mark key="." line="87" column="93" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/nl/reclassering/iris/web/action/components/word/template.xsd" timestamp="1513771282819">
        <mark key="[" line="78" column="62" />
        <mark key="]" line="78" column="77" />
        <mark key="." line="78" column="77" />
        <mark key="^" line="78" column="77" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/onderliggende/labelLayoutCustomFragments.xhtml" timestamp="1516786934888">
        <mark key="[" line="51" column="161" />
        <mark key="]" line="51" column="161" />
        <mark key="^" line="51" column="161" />
        <mark key="." line="51" column="161" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.074.sql" timestamp="1517489778784">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="29" column="0" />
        <mark key="]" line="60" column="0" />
        <mark key="." line="154" column="0" />
        <mark key="^" line="146" column="26" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/adviezen/advies_voorwaardelijkpij.xhtml" timestamp="1519206540066">
        <mark key="[" line="31" column="55" />
        <mark key="]" line="31" column="84" />
        <mark key="." line="30" column="0" />
      </file>
      <file name="$USER_HOME$/git/jsf-playground/web/WEB-INF/faces-config.xml" timestamp="1516986663096">
        <mark key="[" line="10" column="4" />
        <mark key="]" line="22" column="15" />
        <mark key="^" line="10" column="3" />
        <mark key="." line="10" column="4" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/messages/generiek.properties" timestamp="1509980873266">
        <mark key="'" line="276" column="18" />
        <mark key="[" line="765" column="52" />
        <mark key="]" line="765" column="53" />
        <mark key="^" line="765" column="53" />
        <mark key="." line="765" column="53" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/messages/common.properties" timestamp="1516959204584">
        <mark key="'" line="75" column="0" />
        <mark key="[" line="107" column="42" />
        <mark key="]" line="107" column="47" />
        <mark key="^" line="107" column="47" />
        <mark key="." line="107" column="47" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/action/doelenregistratie/GroepeerType.java" timestamp="1509369855361">
        <mark key="[" line="58" column="34" />
        <mark key="]" line="58" column="67" />
        <mark key="^" line="58" column="67" />
        <mark key="." line="58" column="67" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/delictverleden.xhtml" timestamp="1517833654774">
        <mark key="[" line="2" column="153" />
        <mark key="]" line="3" column="37" />
        <mark key="." line="3" column="37" />
        <mark key="^" line="3" column="37" />
      </file>
      <file name="$USER_HOME$/git/jsf-playground/src/mypackage/User.java" timestamp="1516989211479">
        <mark key="[" line="31" column="6" />
        <mark key="]" line="31" column="5" />
        <mark key="^" line="31" column="5" />
        <mark key="." line="31" column="5" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-ear/pom.xml" timestamp="1508855207575">
        <mark key="[" line="16" column="0" />
        <mark key="]" line="16" column="0" />
        <mark key="." line="16" column="0" />
        <mark key="^" line="15" column="62" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/verdieping_static99R.xhtml" timestamp="1516105750652">
        <mark key="'" line="42" column="45" />
        <mark key="[" line="57" column="627" />
        <mark key="]" line="57" column="684" />
        <mark key="^" line="57" column="684" />
        <mark key="." line="57" column="684" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/snelinstrument/si-adviesLookup.xhtml" timestamp="1516019668246">
        <mark key="[" line="6" column="69" />
        <mark key="]" line="6" column="80" />
        <mark key="." line="6" column="80" />
        <mark key="^" line="6" column="80" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/responsiviteit.xhtml" timestamp="1517906391953">
        <mark key="'" line="26" column="154" />
        <mark key="[" line="10" column="0" />
        <mark key="]" line="24" column="0" />
        <mark key="^" line="23" column="15" />
        <mark key="." line="23" column="16" />
      </file>
      <file name="$USER_HOME$/git/jsf-playground/src/mypackage/MyValidator.java" timestamp="1516986515704">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="8" column="14" />
        <mark key="." line="8" column="14" />
        <mark key="^" line="8" column="14" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-common/src/main/java/CreatePrograms.java" timestamp="1513173711623">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/delict_delictgeschiedenis.xhtml" timestamp="1513872265405">
        <mark key="'" line="36" column="22" />
        <mark key="[" line="15" column="67" />
        <mark key="]" line="15" column="66" />
        <mark key="." line="15" column="66" />
        <mark key="^" line="15" column="66" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/taxatie_risicos.xhtml" timestamp="1509629152461">
        <mark key="[" line="19" column="87" />
        <mark key="]" line="19" column="87" />
        <mark key="^" line="19" column="105" />
        <mark key="." line="19" column="87" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_anders.xhtml" timestamp="1511261783157">
        <mark key="[" line="10" column="131" />
        <mark key="]" line="10" column="147" />
        <mark key="." line="10" column="147" />
        <mark key="^" line="10" column="147" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-common/src/main/java/nl/reclassering/iris/common/utils/MessageTranslator.java" timestamp="1507888686880">
        <mark key="[" line="77" column="20" />
        <mark key="]" line="77" column="21" />
        <mark key="." line="77" column="21" />
        <mark key="^" line="77" column="21" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.071.sql" timestamp="1517905612471">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="499" column="26" />
        <mark key="]" line="204" column="40" />
        <mark key="^" line="355" column="9" />
        <mark key="." line="355" column="9" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/analyse_recidiverisico.xhtml" timestamp="1511521340246">
        <mark key="'" line="20" column="22" />
        <mark key="[" line="8" column="0" />
        <mark key="]" line="8" column="0" />
        <mark key="^" line="127" column="7" />
        <mark key="." line="8" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/new/infoButton.xhtml" timestamp="1515768940188">
        <mark key="'" line="13" column="0" />
        <mark key="[" line="7" column="0" />
        <mark key="]" line="11" column="20" />
        <mark key="^" line="7" column="68" />
        <mark key="." line="7" column="68" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/resources/nl/reclassering/iris/web/action/diagnose/uitvoering/uitgebreidadvies/util/taxatie_analyse.xhtml" timestamp="1517923303722">
        <mark key="[" line="2" column="25" />
        <mark key="]" line="2" column="24" />
        <mark key="^" line="2" column="24" />
        <mark key="." line="2" column="24" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" timestamp="1519201106624">
        <mark key="'" line="42" column="36" />
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="61" />
        <mark key="." line="26" column="72" />
        <mark key="^" line="27" column="23" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/totaalscoreFragment.xhtml" timestamp="1516198039570">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="18" column="137" />
        <mark key="]" line="18" column="140" />
        <mark key="^" line="18" column="140" />
        <mark key="." line="18" column="140" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/checkBoxFragment.xhtml" timestamp="1517932444258">
        <mark key="[" line="16" column="24" />
        <mark key="]" line="16" column="41" />
        <mark key="." line="16" column="36" />
        <mark key="^" line="16" column="36" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/WEB-INF/web.xml" timestamp="1516999884092">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="18" column="46" />
        <mark key="]" line="18" column="68" />
        <mark key="." line="18" column="46" />
        <mark key="^" line="18" column="45" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_relatiepartner.xhtml" timestamp="1516873214821">
        <mark key="'" line="29" column="83" />
        <mark key="[" line="37" column="65" />
        <mark key="]" line="37" column="90" />
        <mark key="." line="36" column="15" />
        <mark key="^" line="36" column="15" />
      </file>
      <file name="$USER_HOME$/git/jsf-playground/src/mypackage/MyConverter.java" timestamp="1516983737210">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="7" column="27" />
        <mark key="." line="7" column="27" />
        <mark key="^" line="7" column="27" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/component/siVeld/SiVeld.java" timestamp="1516378463711">
        <mark key="[" line="23" column="31" />
        <mark key="]" line="23" column="29" />
        <mark key="." line="23" column="29" />
        <mark key="^" line="23" column="29" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.078.sql" timestamp="1517487780995">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="31" column="0" />
        <mark key="]" line="57" column="31" />
        <mark key="^" line="54" column="6" />
        <mark key="." line="54" column="7" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/component/training/trainingList.xhtml" timestamp="1511185936268">
        <mark key="'" line="46" column="107" />
        <mark key="[" line="106" column="72" />
        <mark key="]" line="106" column="76" />
        <mark key="." line="106" column="76" />
        <mark key="^" line="106" column="76" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/information/validateAll.xhtml" timestamp="1516734657851">
        <mark key="[" line="7" column="16" />
        <mark key="]" line="7" column="8" />
        <mark key="^" line="7" column="8" />
        <mark key="." line="7" column="8" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/adviezen/advies_rechtszitting.xhtml" timestamp="1519206751755">
        <mark key="[" line="34" column="52" />
        <mark key="]" line="34" column="76" />
        <mark key="^" line="32" column="152" />
        <mark key="." line="32" column="152" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/WEB-INF/faces-config.xml" timestamp="1516031309445">
        <mark key="[" line="52" column="74" />
        <mark key="]" line="52" column="74" />
        <mark key="." line="52" column="74" />
        <mark key="^" line="52" column="74" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/action/actionButtonInclude.xhtml" timestamp="1516777147692">
        <mark key="'" line="57" column="116" />
        <mark key="[" line="59" column="84" />
        <mark key="]" line="59" column="110" />
        <mark key="." line="59" column="110" />
        <mark key="^" line="59" column="110" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/si/infoButton.xhtml" timestamp="1517003376397">
        <mark key="[" line="12" column="0" />
        <mark key="]" line="12" column="0" />
        <mark key="^" line="4" column="35" />
        <mark key="." line="12" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/java/nl/reclassering/iris/model/activiteit/DiagnoseActiviteit.java" timestamp="1511965613621">
        <mark key="'" line="249" column="65" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/advies.xhtml" timestamp="1516635411474">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="5" column="3" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/git/gdisqlgen/test.sql" timestamp="1519207507055">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="210" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/onderliggende/radioWithCustomFragment.xhtml" timestamp="1516786955537">
        <mark key="'" line="21" column="38" />
        <mark key="[" line="22" column="118" />
        <mark key="]" line="22" column="146" />
        <mark key="." line="22" column="146" />
        <mark key="^" line="22" column="146" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/beeindiging_popup.xhtml" timestamp="1516959299602">
        <mark key="[" line="60" column="126" />
        <mark key="]" line="60" column="143" />
        <mark key="." line="60" column="143" />
        <mark key="^" line="60" column="143" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/radioButtonFragment.xhtml" timestamp="1517835067983">
        <mark key="'" line="17" column="128" />
        <mark key="[" line="44" column="25" />
        <mark key="]" line="44" column="25" />
        <mark key="^" line="44" column="25" />
        <mark key="." line="44" column="25" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/new/label.xhtml" timestamp="1515768893643">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="74" />
        <mark key="." line="6" column="27" />
        <mark key="^" line="6" column="45" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/fragmentTemplate.xhtml" timestamp="1518104002265">
        <mark key="'" line="63" column="58" />
        <mark key="[" line="66" column="0" />
        <mark key="]" line="73" column="46" />
        <mark key="." line="86" column="33" />
        <mark key="^" line="86" column="33" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/textBoxFragment.xhtml" timestamp="1519119214666">
        <mark key="[" line="22" column="120" />
        <mark key="]" line="21" column="37" />
        <mark key="^" line="21" column="37" />
        <mark key="." line="21" column="37" />
      </file>
      <file name="/Dummy.txt" timestamp="1519139071084">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/snelinstrument/si-textArea.xhtml" timestamp="1516010170219">
        <mark key="[" line="48" column="79" />
        <mark key="]" line="48" column="103" />
        <mark key="^" line="48" column="103" />
        <mark key="." line="48" column="103" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/java/nl/reclassering/iris/web/action/doelenregistratie/DoelenRegistratieAction.java" timestamp="1511950531109">
        <mark key="'" line="1128" column="6" />
        <mark key="[" line="306" column="29" />
        <mark key="]" line="306" column="37" />
        <mark key="^" line="306" column="37" />
        <mark key="." line="306" column="37" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/test/java/nl/reclassering/iris/web/action/doelenregistratie/GroepeerTypeTest.java" timestamp="1509018066672">
        <mark key="[" line="26" column="46" />
        <mark key="]" line="26" column="45" />
        <mark key="." line="26" column="45" />
        <mark key="^" line="26" column="45" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/snelinstrument/si-infoIcon.xhtml" timestamp="1516315446018">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="8" column="7" />
        <mark key="^" line="8" column="7" />
        <mark key="." line="8" column="7" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/test/java/nl/reclassering/iris/web/action/component/training/TrainingListActionTest.java" timestamp="1508758506666">
        <mark key="'" line="356" column="38" />
        <mark key="[" line="215" column="0" />
        <mark key="]" line="215" column="6" />
        <mark key="." line="215" column="6" />
        <mark key="^" line="215" column="5" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/component/doelenregistratie/doelenRegistratie.xhtml" timestamp="1508935135085">
        <mark key="'" line="41" column="25" />
        <mark key="[" line="68" column="0" />
        <mark key="]" line="68" column="0" />
        <mark key="^" line="69" column="143" />
        <mark key="." line="68" column="0" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/verdieping_externe_partij.xhtml" timestamp="1511523329074">
        <mark key="[" line="7" column="125" />
        <mark key="]" line="7" column="142" />
        <mark key="." line="7" column="142" />
        <mark key="^" line="7" column="142" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/selecterenProfiel.xhtml" timestamp="1513693739739">
        <mark key="[" line="35" column="39" />
        <mark key="]" line="35" column="38" />
        <mark key="^" line="35" column="38" />
        <mark key="." line="35" column="38" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/test/java/nl/reclassering/iris/web/action/GebruikersVoorkeurenActionTest.java" timestamp="1508764080495">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="74" column="65" />
        <mark key="]" line="74" column="92" />
        <mark key="^" line="74" column="92" />
        <mark key="." line="74" column="92" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_6.2005.sql" timestamp="1508836949562">
        <mark key="[" line="25" column="10" />
        <mark key="]" line="25" column="9" />
        <mark key="^" line="25" column="9" />
        <mark key="." line="25" column="9" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/repeatableFragment.xhtml" timestamp="1513696256138">
        <mark key="[" line="7" column="152" />
        <mark key="]" line="7" column="152" />
        <mark key="." line="7" column="152" />
        <mark key="^" line="7" column="155" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.073.sql" timestamp="1516789701658">
        <mark key="'" line="661" column="7" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="678" column="0" />
        <mark key="^" line="136" column="72" />
        <mark key="." line="159" column="51" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/new/value.xhtml" timestamp="1515501290806">
        <mark key="[" line="13" column="45" />
        <mark key="]" line="13" column="45" />
        <mark key="." line="13" column="45" />
        <mark key="^" line="13" column="131" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/fragments/projectFragment.xhtml" timestamp="1509007095190">
        <mark key="[" line="81" column="57" />
        <mark key="]" line="81" column="57" />
        <mark key="." line="81" column="57" />
        <mark key="^" line="76" column="70" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/consoles/db/878c2709-dc2a-47d0-8c2e-45816cbb63aa/console.sql" timestamp="1519200650812">
        <mark key="[" line="0" column="42" />
        <mark key="]" line="0" column="42" />
        <mark key="." line="0" column="42" />
        <mark key="^" line="0" column="45" />
      </file>
      <file name="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.069.sql" timestamp="1511179735869">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="198" column="25" />
        <mark key="]" line="198" column="26" />
        <mark key="." line="198" column="26" />
        <mark key="^" line="198" column="26" />
      </file>
      <file name="/fragment.java" timestamp="1519207038338">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/git/gdisqlgen/test.yaml" timestamp="1519207017579">
        <mark key="[" line="16" column="41" />
        <mark key="]" line="17" column="17" />
        <mark key="^" line="17" column="17" />
        <mark key="." line="17" column="17" />
      </file>
    </filemarks>
    <jumps>
      <jump line="1029" column="4" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="57" column="20" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="930" column="22" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="935" column="22" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="939" column="61" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="948" column="67" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="962" column="36" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="966" column="71" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="22" column="11" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="63" column="14" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="67" column="13" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="71" column="12" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="76" column="15" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="925" column="44" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="7" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_delictverleden.xhtml" />
      <jump line="46" column="8" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_delictverleden.xhtml" />
      <jump line="6" column="20" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_delictverleden.xhtml" />
      <jump line="48" column="22" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_delictverleden.xhtml" />
      <jump line="1219" column="21" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="374" column="20" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="921" column="22" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="1148" column="1" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="315" column="82" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="37" column="31" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="159" column="58" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/uitgebreidadviesList.xhtml" />
      <jump line="17" column="17" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="12" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="22" column="42" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_verslaving.xhtml" />
      <jump line="16" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_verslaving.xhtml" />
      <jump line="24" column="50" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="198" column="61" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="1946" column="21" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.082.sql" />
      <jump line="10" column="0" filename="$APPLICATION_CONFIG_DIR$/consoles/db/878c2709-dc2a-47d0-8c2e-45816cbb63aa/console.sql" />
      <jump line="42" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="83" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="2274" column="13" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.082.sql" />
      <jump line="11" column="11" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="1" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="73" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="122" column="22" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="110" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="370" column="12" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="1152" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="427" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="34" column="47" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/uitgebreidadviesList.xhtml" />
      <jump line="431" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="445" column="10" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="444" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="474" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/resources/stylesheet/instrument.css" />
      <jump line="1477" column="27" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1812" column="38" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1817" column="46" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1821" column="39" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1829" column="46" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1833" column="39" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1841" column="46" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1845" column="42" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1848" column="49" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="540" column="80" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="543" column="34" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="548" column="42" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="553" column="42" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="558" column="42" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="865" column="89" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="866" column="87" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="1807" column="42" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="0" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/fragmentTemplate.xhtml" />
      <jump line="24" column="4" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/fragmentTemplate.xhtml" />
      <jump line="35" column="86" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/fragmentTemplate.xhtml" />
      <jump line="63" column="58" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/layout/components/instrument/fragmentTemplate.xhtml" />
      <jump line="141" column="120" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="1753" column="25" filename="$USER_HOME$/git/IRIS/iris-web/src/main/resources/META-INF/resources/templates/instrument/uitgebreidadvies.xml" />
      <jump line="42" column="36" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/blokken/factoren_middelengebruik_en_verslaving.xhtml" />
      <jump line="153" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="10" column="71" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="83" column="120" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="84" column="39" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="101" column="110" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="113" column="93" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="119" column="56" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.085.sql" />
      <jump line="156" column="0" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/uitgebreidadviesList.xhtml" />
      <jump line="190" column="28" filename="$USER_HOME$/git/IRIS/iris-web/src/main/webapp/pages/diagnose/uitgebreidadvies/uitgebreidadviesList.xhtml" />
      <jump line="13" column="18" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="2" column="29" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="9598" column="21" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="0" column="0" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="1118" column="47" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="5" column="2" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="1020" column="0" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="8" column="2" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="2349" column="0" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="16" column="0" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="12" column="3" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="1054" column="0" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="22" column="3" filename="$USER_HOME$/git/gdisqlgen/test.yaml" />
      <jump line="0" column="0" filename="$USER_HOME$/git/gdisqlgen/test.sql" />
      <jump line="194" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.097.sql" />
      <jump line="210" column="0" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.097.sql" />
      <jump line="0" column="49" filename="$USER_HOME$/git/IRIS/iris-domain-model/src/main/sql/update/iris_change_UA.097.sql" />
    </jumps>
    <registers>
      <register name="a" type="4">
        <text>/* Generated with gdisqlgen. Original YAML input:

entries:
  - naam: ua_advies_voorwpij_uitvoerbaar
    omschrijving: Dadelijke uitvoerbaarheid
    waardebereik: ua_advies_dadelijke_uitvoerbaarheid
    relevantiefunctie: KADERVOORWPIJ
    itekst: U2604

  - naam: ua_advies_tbsvoorw_uitvoerbaar
    omschrijving: Dadelijke uitvoerbaarheid
    waardebereik: ua_advies_dadelijke_uitvoerbaarheid
    relevantiefunctie: KADERTBSMETVOORW
    itekst: U0703

  - naam: ua_advies_uitvoerbaarheid
    omschrijving: Dadelijke uitvoerbaarheid
    waardebereik: ua_advies_dadelijke_uitvoerbaarheid
    relevantiefunctie: KADERRECHTSZITTING
    itekst: U2408

*/
------ Infotekst U2604
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U2604' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U2604'
    , 'Dadelijke uitvoerbaarheid'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'))
/
------ Veld definitie ua_advies_voorwpij_uitvoerbaar
MERGE INTO VELD_DEFINITIES VDE
USING
  (SELECT 'ua_advies_voorwpij_uitvoerbaar' AS NAAM
   FROM DUAL) D
ON (VDE.NAAM = D.NAAM)
WHEN MATCHED THEN
UPDATE SET
  VDE.OMSCHRIJVING = 'Dadelijke uitvoerbaarheid'
  , VDE.ITEKST_ID  = (SELECT ID
                      FROM INFOTEKSTEN
                      WHERE CODE = 'U2604')
  , VDE.RELEVANTIE_FUNCTIE_TYPE = 'KADERVOORWPIJ'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , NAAM
  , OMSCHRIJVING
  , WAARDE_BEREIK_ID
  , ITEKST_ID
  , RELEVANTIE_FUNCTIE_TYPE)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'ua_advies_voorwpij_uitvoerbaar'
    , 'Dadelijke uitvoerbaarheid'
    , (SELECT id
       FROM waarde_bereiken
       WHERE naam = 'ua_advies_dadelijke_uitvoerbaarheid')
    , (SELECT ID
       FROM INFOTEKSTEN
       WHERE CODE = 'U2604')
    , 'KADERVOORWPIJ')
/
------ Infotekst U0703
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U0703' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U0703'
    , 'Dadelijke uitvoerbaarheid'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'))
/
------ Veld definitie ua_advies_tbsvoorw_uitvoerbaar
MERGE INTO VELD_DEFINITIES VDE
USING
  (SELECT 'ua_advies_tbsvoorw_uitvoerbaar' AS NAAM
   FROM DUAL) D
ON (VDE.NAAM = D.NAAM)
WHEN MATCHED THEN
UPDATE SET
  VDE.OMSCHRIJVING = 'Dadelijke uitvoerbaarheid'
  , VDE.ITEKST_ID  = (SELECT ID
                      FROM INFOTEKSTEN
                      WHERE CODE = 'U0703')
  , VDE.RELEVANTIE_FUNCTIE_TYPE = 'KADERTBSMETVOORW'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , NAAM
  , OMSCHRIJVING
  , WAARDE_BEREIK_ID
  , ITEKST_ID
  , RELEVANTIE_FUNCTIE_TYPE)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'ua_advies_tbsvoorw_uitvoerbaar'
    , 'Dadelijke uitvoerbaarheid'
    , (SELECT id
       FROM waarde_bereiken
       WHERE naam = 'ua_advies_dadelijke_uitvoerbaarheid')
    , (SELECT ID
       FROM INFOTEKSTEN
       WHERE CODE = 'U0703')
    , 'KADERTBSMETVOORW')
/
------ Infotekst U2408
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U2408' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U2408'
    , 'Dadelijke uitvoerbaarheid'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'))
/
------ Veld definitie ua_advies_uitvoerbaarheid
MERGE INTO VELD_DEFINITIES VDE
USING
  (SELECT 'ua_advies_uitvoerbaarheid' AS NAAM
   FROM DUAL) D
ON (VDE.NAAM = D.NAAM)
WHEN MATCHED THEN
UPDATE SET
  VDE.OMSCHRIJVING = 'Dadelijke uitvoerbaarheid'
  , VDE.ITEKST_ID  = (SELECT ID
                      FROM INFOTEKSTEN
                      WHERE CODE = 'U2408')
  , VDE.RELEVANTIE_FUNCTIE_TYPE = 'KADERRECHTSZITTING'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , NAAM
  , OMSCHRIJVING
  , WAARDE_BEREIK_ID
  , ITEKST_ID
  , RELEVANTIE_FUNCTIE_TYPE)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'ua_advies_uitvoerbaarheid'
    , 'Dadelijke uitvoerbaarheid'
    , (SELECT id
       FROM waarde_bereiken
       WHERE naam = 'ua_advies_dadelijke_uitvoerbaarheid')
    , (SELECT ID
       FROM INFOTEKSTEN
       WHERE CODE = 'U2408')
    , 'KADERRECHTSZITTING')
/</text>
      </register>
      <register name="&quot;" type="4">
        <text>/* Generated with gdisqlgen. Original YAML input:

entries:
  - naam: ua_advies_voorwpij_uitvoerbaar
    omschrijving: Dadelijke uitvoerbaarheid
    waardebereik: ua_advies_dadelijke_uitvoerbaarheid
    relevantiefunctie: KADERVOORWPIJ
    itekst: U2604

  - naam: ua_advies_tbsvoorw_uitvoerbaar
    omschrijving: Dadelijke uitvoerbaarheid
    waardebereik: ua_advies_dadelijke_uitvoerbaarheid
    relevantiefunctie: KADERTBSMETVOORW
    itekst: U0703

  - naam: ua_advies_uitvoerbaarheid
    omschrijving: Dadelijke uitvoerbaarheid
    waardebereik: ua_advies_dadelijke_uitvoerbaarheid
    relevantiefunctie: KADERRECHTSZITTING
    itekst: U2408

*/
------ Infotekst U2604
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U2604' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U2604'
    , 'Dadelijke uitvoerbaarheid'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'))
/
------ Veld definitie ua_advies_voorwpij_uitvoerbaar
MERGE INTO VELD_DEFINITIES VDE
USING
  (SELECT 'ua_advies_voorwpij_uitvoerbaar' AS NAAM
   FROM DUAL) D
ON (VDE.NAAM = D.NAAM)
WHEN MATCHED THEN
UPDATE SET
  VDE.OMSCHRIJVING              = 'Dadelijke uitvoerbaarheid'
  , VDE.ITEKST_ID               = (SELECT ID
                                   FROM INFOTEKSTEN
                                   WHERE CODE = 'U2604')
  , VDE.RELEVANTIE_FUNCTIE_TYPE = 'KADERVOORWPIJ'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , NAAM
  , OMSCHRIJVING
  , WAARDE_BEREIK_ID
  , ITEKST_ID
  , RELEVANTIE_FUNCTIE_TYPE)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'ua_advies_voorwpij_uitvoerbaar'
    , 'Dadelijke uitvoerbaarheid'
    , (SELECT id
       FROM waarde_bereiken
       WHERE naam = 'ua_advies_dadelijke_uitvoerbaarheid')
    , (SELECT ID
       FROM INFOTEKSTEN
       WHERE CODE = 'U2604')
    , 'KADERVOORWPIJ')
/
------ Infotekst U0703
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U0703' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U0703'
    , 'Dadelijke uitvoerbaarheid'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'))
/
------ Veld definitie ua_advies_tbsvoorw_uitvoerbaar
MERGE INTO VELD_DEFINITIES VDE
USING
  (SELECT 'ua_advies_tbsvoorw_uitvoerbaar' AS NAAM
   FROM DUAL) D
ON (VDE.NAAM = D.NAAM)
WHEN MATCHED THEN
UPDATE SET
  VDE.OMSCHRIJVING              = 'Dadelijke uitvoerbaarheid'
  , VDE.ITEKST_ID               = (SELECT ID
                                   FROM INFOTEKSTEN
                                   WHERE CODE = 'U0703')
  , VDE.RELEVANTIE_FUNCTIE_TYPE = 'KADERTBSMETVOORW'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , NAAM
  , OMSCHRIJVING
  , WAARDE_BEREIK_ID
  , ITEKST_ID
  , RELEVANTIE_FUNCTIE_TYPE)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'ua_advies_tbsvoorw_uitvoerbaar'
    , 'Dadelijke uitvoerbaarheid'
    , (SELECT id
       FROM waarde_bereiken
       WHERE naam = 'ua_advies_dadelijke_uitvoerbaarheid')
    , (SELECT ID
       FROM INFOTEKSTEN
       WHERE CODE = 'U0703')
    , 'KADERTBSMETVOORW')
/
------ Infotekst U2408
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U2408' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U2408'
    , 'Dadelijke uitvoerbaarheid'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'))
/
------ Veld definitie ua_advies_uitvoerbaarheid
MERGE INTO VELD_DEFINITIES VDE
USING
  (SELECT 'ua_advies_uitvoerbaarheid' AS NAAM
   FROM DUAL) D
ON (VDE.NAAM = D.NAAM)
WHEN MATCHED THEN
UPDATE SET
  VDE.OMSCHRIJVING              = 'Dadelijke uitvoerbaarheid'
  , VDE.ITEKST_ID               = (SELECT ID
                                   FROM INFOTEKSTEN
                                   WHERE CODE = 'U2408')
  , VDE.RELEVANTIE_FUNCTIE_TYPE = 'KADERRECHTSZITTING'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , NAAM
  , OMSCHRIJVING
  , WAARDE_BEREIK_ID
  , ITEKST_ID
  , RELEVANTIE_FUNCTIE_TYPE)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'ua_advies_uitvoerbaarheid'
    , 'Dadelijke uitvoerbaarheid'
    , (SELECT id
       FROM waarde_bereiken
       WHERE naam = 'ua_advies_dadelijke_uitvoerbaarheid')
    , (SELECT ID
       FROM INFOTEKSTEN
       WHERE CODE = 'U2408')
    , 'KADERRECHTSZITTING')
/</text>
      </register>
      <register name="b" type="4">
        <text encoding="base64">ICAgICAgICA8aXJpczp0ZXh0QXJlYVdpdGhBZGRpdGlvbmFsVGV4dEZyYWdtZW50IHZlbGROYWFtPSJ0YXhhdGllX2FuYWx5c2VfdWl0dHJla3NlbCIgYWRkVGVrc3Q9InRheGF0aWVfYW5hbHlzZS54aHRtbCIgdm9sZ05yPSIyNCIgc2hvd0luZm9UZWtzdD0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZUJvbGQ9InRydWUiIGFkdmllc0xvb2t1cD0idGF4YXRpZV9hbmFseXNlX3VpdHRyZWtzZWw7VUlUR0VCUkVJRF9BRFZJRVMiIGFkdmllc0Jlc2NoaWtiYWFyPSJ0cnVlIiBlbmFibGVBamF4PSJmYWxzZSIvPg==</text>
      </register>
      <register name="c" type="4">
        <text>---- Info veld U3008
MERGE INTO INFOTEKSTEN ITK
USING
  (SELECT 'U3008' AS CODE
   FROM DUAL) D
ON (D.CODE = ITK.CODE)
WHEN MATCHED THEN
UPDATE SET
  ITK.OMSCHRIJVING = 'U3008: Delict onder invloed van alcohol en/of drugs'
WHEN NOT MATCHED THEN
INSERT
(VERSION
  , DATUM_TIJD_LAATST_GEWIJZIGD
  , DATUM_TIJD_TOEGEVOEGD
  , TOEGEVOEGD_DOOR_ORGANISATIE
  , CODE
  , OMSCHRIJVING
  , AANVANGSDATUM)
VALUES
  (0
    , systimestamp
    , systimestamp
    , 'IRISUA'
    , 'U3008'
    , 'U3008: Delict onder invloed van alcohol en/of drugs'
    , TO_DATE('01-01-2017', 'dd-mm-yyyy'));</text>
      </register>
      <register name="d" type="4">
        <text encoding="base64">ICAsIElURUtTVF9JRCk=</text>
      </register>
      <register name="-" type="4">
        <text>U2604</text>
      </register>
      <register name="/" type="4">
        <text>ua_advies_uitvoerbaarheid</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIGl0ZWtzdDogVTI2MDQK</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="q" type="4">
        <text>Onbekend</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">ICAtIG5hYW06IHVhX3JlY2h0c3ppdHRpbmdfbWFhdHJlZ2VsZW5fdmVyYm9kZW4KICAgIG9tc2NocmlqdmluZzogQWR2aWVzIG92ZXIgbWFhdHJlZ2VsZW4gZW4gdmVyYm9kZW4KICAgIGl0ZWtzdDogVTI0MDcKICAgIHdhYXJkZWJlcmVpazogdWFfcnpfbWFhdHJlZ2VsZW5fdmVyYm9kZW4KICAgIHJlbGV2YW50aWVmdW5jdGllOiBLQURFUlJFQ0hUU1pJVFRJTkc=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="5" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="6" type="4">
        <text encoding="base64">ICAtCiAgICBuYWFtOiB1YV9hZHZpZXNfdWl0dm9lcmJhYXJoZWlkCiAgICBvbXNjaHJpanZpbmc6IERhZGVsaWprZSB1aXR2b2VyYmFhcmhlaWQKICAgIHdhYXJkZWJlcmVpazogdWFfYWR2aWVzX2RhZGVsaWprZV91aXR2b2VyYmFhcmhlaWQKICAgIHJlbGV2YW50aWVmdW5jdGllOiBLQURFUlJFQ0hUU1pJVFRJTkc=</text>
      </register>
      <register name="7" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="w" type="4">
        <text encoding="base64">ICAgICwgKFNFTEVDVCBJRAogICAgICAgRlJPTSBJTkZPVEVLU1RFTgogICAgICAgV0hFUkUgQ09ERSA9ICdVOTA3MScpKQ==</text>
      </register>
      <register name="8" type="4">
        <text encoding="base64">ICAtCiAgICBuYWFtOiB1YV9hZHZpZXNfdGJzdm9vcndfdWl0dm9lcmJhYXIKICAgIG9tc2NocmlqdmluZzogRGFkZWxpamtlIHVpdHZvZXJiYWFyaGVpZAogICAgd2FhcmRlYmVyZWlrOiB1YV9hZHZpZXNfZGFkZWxpamtlX3VpdHZvZXJiYWFyaGVpZAogICAgcmVsZXZhbnRpZWZ1bmN0aWU6IEtBREVSVEJTTUVUVk9PUlc=</text>
      </register>
      <register name="9" type="4">
        <text encoding="base64">ICAtCiAgICBuYWFtOiB1YV9hZHZpZXNfdm9vcndwaWpfdWl0dm9lcmJhYXIKICAgIG9tc2NocmlqdmluZzogRGFkZWxpamtlIHVpdHZvZXJiYWFyaGVpZCAKICAgIHdhYXJkZWJlcmVpazogdWFfYWR2aWVzX2RhZGVsaWprZV91aXR2b2VyYmFhcmhlaWQKICAgIHJlbGV2YW50aWVmdW5jdGllOiBLQURFUlZPT1JXUElK</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>ua_advies_uitvoerbaarheid</last-search>
      <last-offset />
      <last-pattern>ua_advies_uitvoerbaarheid</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry>verslaving</entry>
        <entry>.filler</entry>
        <entry>.bottom</entry>
        <entry>filler</entry>
        <entry>bottomAllign</entry>
        <entry>bottomAlign</entry>
        <entry>\verslaving</entry>
        <entry>\cverslaving</entry>
        <entry>width20</entry>
        <entry>fragmentLabe</entry>
        <entry>fragmentLa</entry>
        <entry>Andere middelen of</entry>
        <entry encoding="base64">XGNtaWRkZWxlbmdlYnJ1aWsg</entry>
        <entry>VERTICAAL</entry>
        <entry>jaa</entry>
        <entry encoding="base64">amFhIA==</entry>
        <entry>ua_advies_voorwpij_uitvoerbaar</entry>
        <entry>ua_advies_tbsvoorw_uitvoerbaar</entry>
        <entry>ua_rechtszitting_maatregelen_verboden</entry>
        <entry>ua_advies_uitvoerbaarheid</entry>
      </history-search>
      <history-cmd>
        <entry>%</entry>
        <entry>buffers</entry>
        <entry>wq</entry>
        <entry encoding="base64">JzwsJz53</entry>
        <entry>q:q</entry>
        <entry>fw</entry>
        <entry encoding="base64">JzwsJz5x</entry>
        <entry>f</entry>
        <entry>q</entry>
        <entry>ww</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>